[ { "title": "Deploy Istio in Kubernetes", "url": "/posts/deployistio/", "categories": "istio", "tags": "k8s, kubernetes, servicemesh", "date": "2024-03-13 17:00:00 +0630", "snippet": "To deploy Istio in Kubernetes, follow these step-by-step instructions: Set Up a Kubernetes Cluster: Create a Kubernetes cluster with Istio installed and define a namespace for the tutoria...", "content": "To deploy Istio in Kubernetes, follow these step-by-step instructions: Set Up a Kubernetes Cluster: Create a Kubernetes cluster with Istio installed and define a namespace for the tutorial: export NAMESPACE=tutorialkubectl create namespace $NAMESPACE Install Istio: Install Istio using the demoprofile and include Kiali and Prometheus addons: kubectl apply -f @samples/addons@ Create Kubernetes Ingress Resource: Define an Ingress resource for common Istio services like Grafana, tracing, Prometheus, and Kiali: kubectl apply -f - &lt;&lt;EOFapiVersion: networking.k8s.io/v1kind: Ingressmetadata: name: istio-system namespace: istio-system annotations: kubernetes.io/ingress.class: istiospec: rules: - host: my-istio-dashboard.io http: paths: - path: / pathType: Prefix backend: service: name: grafana port: number: 3000 # Add similar rules for other services like tracing, prometheus, and kialiEOF Create Role for Namespace Access: Create a role to provide read access to the istio-system namespace for participants. Generate Kubernetes Configuration File: Generate a Kubernetes configuration file for each participant using their own configuration details. Set KUBECONFIG Environment Variable: Set the KUBECONFIG environment variable to point to the generated configuration file. By following these steps, you can deploy Istio in your Kubernetes cluster with necessary configurations and access controls in place.Citations:[1] https://istio.io/latest/docs/examples/microservices-istio/setup-kubernetes-cluster/[2] https://istio.io/latest/docs/setup/install/[3] https://www.linode.com/docs/guides/how-to-deploy-istio-with-kubernetes/[4] https://www.youtube.com/watch?v=voAyroDb6xk[5] https://platform9.com/learn/v1.0/tutorials/istio-as-service-mesh" }, { "title": "Setup AWS APP Mesh on EKS", "url": "/posts/awsappmesh/", "categories": "aws", "tags": "aws, eks, servicemesh", "date": "2024-03-13 16:00:00 +0630", "snippet": "To install AWS App Mesh in your Amazon EKS cluster, you can follow these step-by-step instructions: Connect with AWS Account: Use the AWS CLI to configure your AWS access key, secret acce...", "content": "To install AWS App Mesh in your Amazon EKS cluster, you can follow these step-by-step instructions: Connect with AWS Account: Use the AWS CLI to configure your AWS access key, secret access key, and region: aws configure Create an EKS Cluster: If you donâ€™t have an existing EKS cluster, create one using eksctl create cluster[1]. Connect with EKS Cluster: Update the Kubeconfig to connect with the EKS cluster: aws eks update-kubeconfig --name mesh-test-cluster Add eks-charts Repository to Helm: Install the App Mesh Kubernetes custom resource definitions (CRD) using kubectl apply: kubectl apply -k \"https://github.com/aws/eks-charts/stable/appmesh-controller/crds?ref=master\" Create appmesh-system Namespace: Create a namespace for the App Mesh controller: kubectl create ns appmesh-system Create an OpenID Connect (OIDC) Identity Provider: Create an OIDC identity provider for your cluster using eksctl utils associate-iam-oidc-provider[1]. Create an IAM Role: Create an IAM role, attach the AWSAppMeshFullAccess and AWSCloudMapFullAccess policies, and bind it to the appmesh-controller Kubernetes service account: eksctl create iamserviceaccount \\ --cluster mesh-test-cluster \\ --namespace appmesh-system \\ --name appmesh-controller \\ --attach-policy-arn arn:aws:iam::aws:policy/AWSCloudMapFullAccess,arn:aws:iam::aws:policy/AWSAppMeshFullAccess \\ --override-existing-serviceaccounts \\ --approve Deploy the App Mesh Controller: Deploy the App Mesh controller using Helm: helm upgrade -i appmesh-controller eks/appmesh-controller \\ --namespace appmesh-system \\ --set region=ap-south-1 \\ --set serviceAccount.create=false \\ --set serviceAccount.name=appmesh-controller Verify Controller Pod Running: Verify that the Controller pod is running: kubectl get pods -n appmesh-system Create Mesh: Create a mesh using the App Mesh controller. You can create a mesh from AWS CLI, AWS Console, or Kubernetes native YAML[1]. By following these steps, you can successfully install AWS App Mesh in your Amazon EKS cluster.Citations:[1] https://blog.knoldus.com/how-to-setup-aws-app-mesh-with-eks/[2] https://docs.aws.amazon.com/app-mesh/latest/userguide/getting-started-kubernetes.html[3] https://aws.amazon.com/blogs/compute/learning-aws-app-mesh/[4] https://aws.amazon.com/blogs/containers/getting-started-with-app-mesh-and-eks/[5] https://archive.eksworkshop.com/intermediate/330_app_mesh/" } ]
